name: Deploy Obsidian Engine Tools to GitHub Pages

on:
  push:
    branches:
      - master
      - main
    paths:
      - 'discord-css/**'
      - '**/*.html'
      - '**/*.css' 
      - '**/*.js'
      - '**/*.png'
      - '**/*.svg'
      - '**/*.json'
      - '.github/workflows/deploy.yml'
  workflow_dispatch:

# GitHub Pagesへの書き込み権限設定
permissions:
  contents: read
  pages: write
  id-token: write

# 同時実行制限（デプロイの競合回避）
concurrency:
  group: deploy-pages-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ビルドジョブ
  build:
    runs-on: ubuntu-latest
    
    steps:
      # リポジトリチェックアウト
      - name: Checkout
        uses: actions/checkout@v4

      # Node.js環境セットアップ
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: './discord-css/package-lock.json'

      # GitHub Pages設定
      - name: Setup Pages
        uses: actions/configure-pages@v4
        with:
          static_site_generator: other

      # Discord CSS Generator依存関係インストール
      - name: Install Discord CSS dependencies
        working-directory: ./discord-css
        run: npm ci

      # Discord CSS Generator Viteビルド実行
      - name: Build Discord CSS with Vite
        working-directory: ./discord-css
        run: npm run build
        env:
          NODE_ENV: production

      # 古いビルド結果のクリーンアップとディレクトリ作成
      - name: Clean and create main site directory
        run: |
          rm -rf ./dist
          mkdir -p ./dist

      # メインページファイルをdistディレクトリにコピー
      - name: Copy main site files
        run: |
          cp index.html ./dist/
          cp style.css ./dist/
          cp script.js ./dist/

      # Discord CSS Generatorビルド結果をサブディレクトリにコピー
      - name: Copy Discord CSS build
        run: cp -r ./discord-css/dist ./dist/discord-css

      # Jekyll処理を無効化するファイルを作成
      - name: Create .nojekyll file
        run: touch ./dist/.nojekyll

      # GitHub Pages用成果物アップロード
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./dist

  # デプロイジョブ
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      # GitHub Pagesデプロイ
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        with:
          clean: true

  # デプロイ完了通知（オプション）
  notify:
    runs-on: ubuntu-latest
    needs: [build, deploy]
    if: always()
    steps:
      - name: Deployment Status
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "🚀 Obsidian Engine デプロイ成功！"
            echo "📍 メインサイト: https://obsidian-engine.github.io/vtube-tools/"
            echo "🎨 Discord CSS: https://obsidian-engine.github.io/vtube-tools/discord-css/"
          else
            echo "❌ デプロイ失敗"
            exit 1
          fi