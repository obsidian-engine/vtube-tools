/* ==========================================
 * OBS YouTube Live ユニークユーザー名表示
 * 1回コピペ完結版
 * 
 * 使い方：
 * 1. このファイル全体をコピー
 * 2. OBSブラウザソースの「カスタムCSS」にペースト
 * 3. 完了！
 * ========================================== */

/* JavaScript自動実行用の隠しスタイル */
head::after {
    content: "";
    background-image: url("javascript:
        (function(){
            const uniqueUsernames = new Set();
            let container, usernameList, countElement, initialized = false;
            
            function init() {
                if (initialized) return;
                initialized = true;
                console.log('🚀 ユニークユーザー名システム開始');
                
                setTimeout(() => {
                    createUI();
                    extractExisting();
                    observe();
                }, 1000);
            }
            
            function createUI() {
                const existing = document.getElementById('unique-usernames-container');
                if (existing) existing.remove();
                
                container = document.createElement('div');
                container.id = 'unique-usernames-container';
                container.style.cssText = `
                    position: fixed; top: 0; left: 0; width: 100%; height: 100%;
                    background: transparent; padding: 20px; box-sizing: border-box;
                    overflow-y: auto; font-family: 'Segoe UI', sans-serif; z-index: 9999;
                `;
                
                const title = document.createElement('div');
                title.id = 'unique-usernames-title';
                title.textContent = '👥 ユニークユーザー';
                title.style.cssText = `
                    color: #ffffff; font-size: 24px; font-weight: bold; margin-bottom: 20px;
                    text-shadow: 2px 2px 4px rgba(0,0,0,0.9); border-bottom: 3px solid #00ff00;
                    padding-bottom: 10px; text-align: center;
                `;
                
                usernameList = document.createElement('div');
                usernameList.id = 'unique-usernames-list';
                
                countElement = document.createElement('div');
                countElement.id = 'username-count';
                countElement.textContent = '0人';
                countElement.style.cssText = `
                    position: fixed; top: 20px; right: 20px; color: #ffffff;
                    font-size: 18px; font-weight: bold; background: rgba(0,0,0,0.9);
                    padding: 12px 20px; border-radius: 25px; text-shadow: 1px 1px 2px rgba(0,0,0,0.8);
                    border: 2px solid #00ff00; box-shadow: 0 0 15px rgba(0,255,0,0.4);
                `;
                
                container.appendChild(title);
                container.appendChild(usernameList);
                container.appendChild(countElement);
                document.body.appendChild(container);
            }
            
            function extractExisting() {
                document.querySelectorAll('#author-name').forEach(el => {
                    const name = el.textContent.trim();
                    if (name) addUser(name);
                });
            }
            
            function addUser(username) {
                if (!uniqueUsernames.has(username)) {
                    uniqueUsernames.add(username);
                    
                    const el = document.createElement('div');
                    el.className = 'unique-username';
                    el.textContent = username;
                    el.dataset.username = username;
                    el.style.cssText = `
                        color: #00ff00; font-size: 16px; font-weight: bold; margin: 8px 0;
                        padding: 12px 16px; background: rgba(0,0,0,0.8); border-radius: 8px;
                        text-shadow: 1px 1px 2px rgba(0,0,0,0.9); border-left: 4px solid #00ff00;
                        animation: slideInRight 0.5s ease-out; transition: all 0.3s ease;
                        box-shadow: 0 2px 5px rgba(0,0,0,0.3);
                    `;
                    
                    insertAlpha(el, username);
                    updateCount();
                    console.log('➕', username);
                }
            }
            
            function insertAlpha(el, name) {
                const existing = Array.from(usernameList.children);
                let inserted = false;
                
                for (const child of existing) {
                    if (name.localeCompare(child.dataset.username) < 0) {
                        usernameList.insertBefore(el, child);
                        inserted = true;
                        break;
                    }
                }
                
                if (!inserted) usernameList.appendChild(el);
            }
            
            function updateCount() {
                if (countElement) countElement.textContent = uniqueUsernames.size + '人';
            }
            
            function observe() {
                const target = document.querySelector('#items') || document.querySelector('#item-list');
                if (!target) {
                    setTimeout(observe, 5000);
                    return;
                }
                
                new MutationObserver(mutations => {
                    mutations.forEach(mutation => {
                        mutation.addedNodes.forEach(node => {
                            if (node.nodeType === 1) {
                                node.querySelectorAll('#author-name').forEach(el => {
                                    const name = el.textContent.trim();
                                    if (name) addUser(name);
                                });
                            }
                        });
                    });
                }).observe(target, { childList: true, subtree: true });
                
                console.log('👀 監視開始');
            }
            
            window.chatUsernames = {
                clear: () => { uniqueUsernames.clear(); usernameList.innerHTML = ''; updateCount(); },
                list: () => Array.from(uniqueUsernames).sort(),
                count: () => uniqueUsernames.size
            };
            
            if (document.readyState === 'loading') {
                document.addEventListener('DOMContentLoaded', init);
            } else {
                init();
            }
            
            window.addEventListener('load', () => setTimeout(init, 2000));
        })();
        void(0);
    ");
}

/* 通常のCSS部分 */
body {
    background-color: rgba(0, 0, 0, 0) !important;
    margin: 0 !important;
    overflow: hidden !important;
}

yt-live-chat-renderer {
    background-color: transparent !important;
}

yt-live-chat-header-renderer,
yt-live-chat-message-input-renderer,
yt-live-chat-ticker-renderer,
#panel-pages,
#input-panel {
    display: none !important;
}

#item-list,
#items {
    background-color: transparent !important;
    padding: 20px !important;
}

/* 全メッセージを非表示 */
yt-live-chat-text-message-renderer,
yt-live-chat-paid-message-renderer,
yt-live-chat-moderator-message-renderer,
yt-live-chat-deleted-message-renderer,
yt-live-chat-viewer-engagement-message-renderer {
    display: none !important;
}

/* アニメーション */
@keyframes slideInRight {
    from { opacity: 0; transform: translateX(30px); }
    to { opacity: 1; transform: translateX(0); }
}

/* スクロールバー */
::-webkit-scrollbar { width: 8px; }
::-webkit-scrollbar-track { background: rgba(0,0,0,0.3); border-radius: 4px; }
::-webkit-scrollbar-thumb { background: rgba(0,255,0,0.6); border-radius: 4px; }
::-webkit-scrollbar-thumb:hover { background: rgba(0,255,0,0.8); }

/* ホバー効果 */
.unique-username:hover {
    background-color: rgba(0, 255, 0, 0.1) !important;
    transform: translateX(5px) !important;
    box-shadow: 0 4px 10px rgba(0, 255, 0, 0.2) !important;
}

/* ==========================================
 * 📋 コピー完了！OBSの「カスタムCSS」に貼り付けてください
 * 
 * 💡 デバッグコマンド (F12 → コンソール):
 * - chatUsernames.count()  // ユーザー数
 * - chatUsernames.list()   // 全リスト
 * - chatUsernames.clear()  // リセット
 * ========================================== */